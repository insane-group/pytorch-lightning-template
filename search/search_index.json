{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#why","title":"Why ?","text":"<p>When working on a new project, we frequently encountered challenges such as:</p> <ol> <li>Reproducibility: How can we ensure that our results are reproducible across different environments?</li> <li>Boilerplate Code: We often find ourselves writing the same boilerplate code over and over again.</li> </ol> <p>To address these challenges, we have created a template for PyTorch projects that streamlines the setup process and helps you focus on your research.</p>"},{"location":"#main-technologies","title":"Main Technologies","text":"<ul> <li>PyTorch Lightning: A lightweight wrapper for PyTorch that streamlines high-performance AI research. It serves as a structured framework for organizing PyTorch code.</li> <li>Hydra: A powerful configuration framework for managing complex applications. It enables dynamic composition of hierarchical configurations, allowing overrides via config files and the command line.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Click Use this template to create a new repository.</p> <p>Once your repository is set up using the template, clone it and start working with the following commands:</p> <pre><code># Install Rye (https://rye.astral.sh/guide/installation/)\ncurl -sSf https://rye.astral.sh/get | bash\n\n# Clone the repository &amp; cd into it\ngit clone https://github.com/insane-group/&lt;YOUR-PROJECT-NAME&gt;\ncd &lt;YOUR-PROJECT-NAME&gt;\n\n# Rename the project and make sure you change the project details (e.g. name, description, URLs) in the following files:\n# 1. pyproject.toml\n# 2. mkdocs.yml\n# 3. README.md\nmv src/project src/&lt;YOUR-PROJECT-NAME&gt;\n\n# Install dependencies using Rye\nrye sync\n\n# Activate the virtual environment\nsource .venv/bin/activate\n\n# Install the pre-commit hooks\npoe hooks\n\n# Run the training/evaluation script\n# Override any config parameter from command line\npython train.py trainer.max_epochs=20 model.optimizer.lr=1e-4\n# train on CPU\npython train.py trainer=cpu\n# train on 1 GPU\npython train.py trainer=gpu\n</code></pre>"},{"location":"#exploring-the-documentation","title":"Exploring the Documentation","text":"<p>The project's documentation is automatically generated from Python docstrings using <code>MkDocs</code> and <code>mkdocstrings</code>. To view it, simply run <code>poe docs</code> in your terminal or visit <code>https://insane-group.github.io/pytorch-lightning-template/</code>.</p>"},{"location":"#credits","title":"Credits","text":"<p>This template was created by INSANE Group and is based on the following projects:</p> <ul> <li>NN-Template by Grok AI</li> <li>Lightning Hydra Template by ashleve</li> <li>Pytorch Lightning Template by DavidZhang73</li> <li>MNIST Classifier by kengz</li> </ul>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting one of the project maintainers listed below. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT/#project-maintainers","title":"Project Maintainers","text":"<ul> <li>Vassilis Sioros \\&lt;v.sioros@iit.demokritos.gr&gt;</li> </ul>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>These guidelines help ensure a structured and effective development process.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>By contributing to this project, you agree to uphold the Code of Conduct.</p>"},{"location":"CONTRIBUTING/#getting-started","title":"Getting Started","text":"<p>As the sole contributor, you should follow a structured workflow that includes Issue tracking and Pull Requests (PRs). Your supervisor may provide feedback on key contributions.</p>"},{"location":"CONTRIBUTING/#issues","title":"Issues","text":"<p>Use Issues to document problems, propose new features, or note documentation changes. When creating an Issue:</p> <ul> <li>Clearly describe the problem or feature request.</li> <li>If relevant, include error messages, steps to reproduce, or possible solutions.</li> <li>Check for existing Issues to avoid duplication.</li> </ul>"},{"location":"CONTRIBUTING/#pull-requests","title":"Pull Requests","text":"<p>Pull Requests help track changes systematically. When submitting a PR:</p> <ul> <li>Focus on a single feature or fix.</li> <li>Keep changes minimal and well-documented.</li> <li>Ensure new functionality includes unit or integration tests.</li> <li>Update documentation if required.</li> <li>Link the PR to an existing Issue if applicable.</li> <li>Request a review from your supervisor if the change is significant.</li> </ul> <p>For more details, refer to this video. Additionally, feel free to also check this guide.</p>"},{"location":"CONTRIBUTING/#reviewing-pull-requests","title":"Reviewing Pull Requests","text":"<ol> <li>Self-Review: Before finalizing a PR, review your code for clarity, correctness, and adherence to best practices.</li> <li>Supervisor Review: Request feedback from your supervisor.</li> <li>Address Feedback: Implement suggested modifications or justify why changes are unnecessary.</li> <li>Merging PRs: Once reviewed and approved, merge into the appropriate branch, ensuring project integrity.</li> </ol>"},{"location":"CONTRIBUTING/#documenting-your-changes","title":"Documenting Your Changes","text":"<p>This project uses MkDocs for documentation, generated from Python docstrings. When modifying code:</p> <ul> <li>Update relevant docstrings to reflect changes.</li> <li>Run <code>poe docs</code> to verify that the documentation builds without errors.</li> </ul> <p>By following these guidelines, you ensure maintainability and clarity in your contributions.</p>"},{"location":"setting_up_a_dev_environment/","title":"Setting up a dev environment","text":""},{"location":"setting_up_a_dev_environment/#installing-rye","title":"Installing Rye","text":"<p>We use the Rye Python package manager. Having installed Rye you may now create a brand new virtual environment and install the project's dependencies by running:</p> <pre><code>rye sync\n</code></pre>"},{"location":"setting_up_a_dev_environment/#installing-pre-commit-hooks","title":"Installing pre-commit hooks","text":"<p>Git hooks are scripts that run automatically to perform tasks like linting and formatting code at different stages of the development process. pre-commit is a tool designed to manage and share these hooks across projects easily. Having created a virtual environment, install the git hooks by running</p> <pre><code>poe hooks\n</code></pre>"},{"location":"setting_up_a_dev_environment/#testing-via-pytest","title":"Testing via <code>pytest</code>","text":"<p>We are using pytest to automate testing on multiple environments. The test suite can be run using:</p> <pre><code>poe test\n</code></pre>"},{"location":"setting_up_a_dev_environment/#performing-tasks-using-poethepoet","title":"Performing tasks using <code>poethepoet</code>","text":"<p>We are using poethepoet, to perform various development oriented tasks. Formatting, type-checking, as well as a few other operations, can be performed by running</p> <pre><code>poe &lt;task&gt;\n</code></pre> <p>Tip</p> <pre><code>Consider installing `poe` as global dependency to make your life easier using `rye install poethepoet` :stuck_out_tongue:.\n</code></pre> <p>where <code>&lt;task&gt;</code> is one of the tasks listed by running:</p> <pre><code>poe --help\nPoe the Poet - A task runner that works well with poetry.\nversion 0.28.0\n\nResult: No task specified.\n\nUsage:\n  poe [global options] task [task arguments]\n\nGlobal options:\n  -h, --help            Show this help page and exit\n  --version             Print the version and exit\n  -v, --verbose         Increase command output (repeatable)\n  -q, --quiet           Decrease command output (repeatable)\n  -d, --dry-run         Print the task contents but don't actually run it\n  -C PATH, --directory PATH\n                        Specify where to find the pyproject.toml\n  -e EXECUTOR, --executor EXECUTOR\n                        Override the default task executor\n  --ansi                Force enable ANSI output\n  --no-ansi             Force disable ANSI output\n\nConfigured tasks:\n  clean                 Clean up any auxiliary files\n  format                Format your codebase\n  hooks                 Run all pre-commit hooks\n  test                  Run the test suite\n  type-check            Run static type checking on your codebase\n  lint                  Lint your code for errors\n  docs                  Build and serve the documentation\n</code></pre>"},{"location":"why_pytorch_lightning/","title":"Why PyTorch Lightning","text":"<p>Lightning helps structure PyTorch code by separating research from engineering. It\u2019s more of a style guide than a framework.</p> <p>In Lightning, your code is divided into three parts:</p> <ol> <li>Research code \u2192 Placed in the LightningModule.</li> <li>Engineering code \u2192 Eliminated and handled by the Trainer.</li> <li>Non-essential research code (e.g., logging) \u2192 Moved to Callbacks.</li> </ol> <p>As your project grows\u2014adding GPU/TPU training, 16-bit precision, and more\u2014you\u2019ll spend more time engineering than researching. Lightning automates and rigorously tests these components, letting you focus on research.</p>"},{"location":"why_pytorch_lightning/#refactoring-research-code-into-lightningmodule","title":"Refactoring Research Code into LightningModule","text":"<p>The rest is automated by the Trainer:</p> <p></p>"}]}